/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.20
 * Generated at: 2024-04-24 05:45:36 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.day07;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import vo.ProductVO;
import dao.ProductDAO;
import java.util.Set;
import java.util.HashMap;
import java.util.ArrayList;

public final class viewCart_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(3);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(5);
    _jspx_imports_classes.add("java.util.Set");
    _jspx_imports_classes.add("dao.ProductDAO");
    _jspx_imports_classes.add("java.util.HashMap");
    _jspx_imports_classes.add("vo.ProductVO");
    _jspx_imports_classes.add("java.util.ArrayList");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("\r\n");
      out.write("<style>\r\n");
      out.write("	img{\r\n");
      out.write("		width: 100px; height:100px;\r\n");
      out.write("	}\r\n");
      out.write("	table{\r\n");
      out.write("		border-top: 5px solid black;\r\n");
      out.write("		border-bottom: 5px solid black;\r\n");
      out.write("		margin: 0 auto;\r\n");
      out.write("		width: 800px;\r\n");
      out.write("	}\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<table>\r\n");
      out.write("		<tr>\r\n");
      out.write("			<th>상품번호</th>\r\n");
      out.write("			<th>상품명</th>\r\n");
      out.write("			<th>이미지</th>\r\n");
      out.write("			<th>수량</th>\r\n");
      out.write("			<th>할인가격</th>\r\n");
      out.write("		</tr>\r\n");
      out.write("		");

			//session 에서 cart 속성 가져오기 : obj
			Object obj = session.getAttribute("cart");
			//obj <== null
			if(obj == null){
				//ArrayList 생성
				ArrayList<Integer> cart = new ArrayList<>();
				//세션의 속성 지정
				session.setAttribute("cart", cart);
				// 다시 가져오기
				obj = session.getAttribute("cart");
			}
			
			//아래코드부터는 obj가 반드시 존재하게 된다.
			//[23,99,19,19,23,51]
			
			ArrayList<Integer> cart = (ArrayList<Integer>)obj;
			HashMap<Integer, Integer> map = new HashMap<>();
			
			//1개씩 꺼내서 상품과 수량을 집계
			for(Integer it : cart){
				// n번 상품이 존재한다면
				if(map.containsKey(it)){
					// 현재 상품의 개수 구하기
					int cnt = map.get(it);
					// 상품개수에 1증가시키기
					cnt++;
					// 그리고 다시 맵에 넣기
					map.put(it,cnt);
				}else{
					map.put(it,1);
				}
				System.out.println("map : "+map);
			}
			//화면에 표형태로 출력
			
			Set key =map.keySet(); //상품번호만 set 타입으로 리턴
			ProductDAO dao = new ProductDAO();
			ArrayList<ProductVO> item=dao.getData(key);
			
			int total = 0;
			
			for(ProductVO vo : item){
				int cnt = map.get(vo.getPno());
				long price = Math.round(vo.getPrice() * (1 - vo.getDcratio() * 0.01));
				total +=price*cnt;
		
      out.write("\r\n");
      out.write("			<tr>\r\n");
      out.write("				<td>");
      out.print(vo.getPno());
      out.write("</td>\r\n");
      out.write("				<td>");
      out.print(vo.getPname() );
      out.write("</td>\r\n");
      out.write("				<td><img src=\"");
      out.print(vo.getImgfile());
      out.write("\" alt=\"\" /></td>\r\n");
      out.write("				<td>");
      out.print(cnt);
      out.write("</td>\r\n");
      out.write("				<td>");
      out.print(price);
      out.write("</td>\r\n");
      out.write("			</tr>\r\n");
      out.write("			\r\n");
      out.write("		");
	
			}
		
      out.write("\r\n");
      out.write("		<tr>\r\n");
      out.write("			<th colspan=\"4\">합계</td>\r\n");
      out.write("			<th>");
      out.print(total );
      out.write("</td>			\r\n");
      out.write("		</tr>		\r\n");
      out.write("		\r\n");
      out.write("		<tr>\r\n");
      out.write("			<td colspan=\"5\">\r\n");
      out.write("				<input type=\"button\" value=\"결제하기\" />\r\n");
      out.write("			</td>\r\n");
      out.write("		</tr>\r\n");
      out.write("	</table>\r\n");
      out.write("	\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
