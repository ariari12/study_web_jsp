/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.20
 * Generated at: 2024-04-24 02:54:06 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.day07;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import vo.ProductVO;
import dao.ProductDAO;

public final class productDetail_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(3);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(2);
    _jspx_imports_classes.add("dao.ProductDAO");
    _jspx_imports_classes.add("vo.ProductVO");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<meta charset=\"UTF-8\">\n");
      out.write("<title>productDetail.jsp</title>\n");
      out.write("\n");
      out.write("<style type=\"text/css\">\n");
      out.write("\n");
      out.write("   .container {\n");
      out.write("      width: 1000px;\n");
      out.write("      margin: auto;\n");
      out.write("   }\n");
      out.write("   \n");
      out.write("   #pic {\n");
      out.write("      width: 480px;\n");
      out.write("      float: left;\n");
      out.write("   }\n");
      out.write("   \n");
      out.write("   table {\n");
      out.write("      width: 100%;\n");
      out.write("      border-top: 3px solid gray;\n");
      out.write("      border-bottom: 3px solid gray;\n");
      out.write("   }\n");
      out.write("   \n");
      out.write("   .info {\n");
      out.write("      width: 500px;\n");
      out.write("      float: right;\n");
      out.write("   }\n");
      out.write("   \n");
      out.write("   div#pic>img {\n");
      out.write("      width: 100%;\n");
      out.write("      height: 50%;\n");
      out.write("   }\n");
      out.write("   \n");
      out.write("   #desc {\n");
      out.write("      clear: both;\n");
      out.write("   }\n");
      out.write("   \n");
      out.write("   .icon {\n");
      out.write("      width: 50px;\n");
      out.write("      height: 50px\n");
      out.write("   }\n");
      out.write("</style>\n");
      out.write("\n");
      out.write("<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js\"></script>\n");
      out.write("<link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH\" crossorigin=\"anonymous\">\n");
      out.write("<script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js\" integrity=\"sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz\" crossorigin=\"anonymous\"></script>\n");
      out.write("\n");
      out.write("<script type=\"text/javascript\">\n");
      out.write("   \n");
      out.write("   $(function() {\n");
      out.write("      $(\"img[src='../images/cart.png']\").on('click', function() {\n");
      out.write("         //alert(\"dd\");\n");
      out.write("         $(\"#showImg\").show();\n");
      out.write("         //2초 뒤에 cart.jsp로 이동\n");
      out.write("         window.setTimeout(function(){\n");
      out.write("        	 document.frm.action=\"cart.jsp\";\n");
      out.write("        	 document.frm.submit();\n");
      out.write("         }, 2000);\n");
      out.write("      })\n");
      out.write("   })\n");
      out.write("   \n");
      out.write("   function closeDiv(){\n");
      out.write("	   $(\"#showImg\").hide();\n");
      out.write("   }\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("</script>\n");
      out.write("\n");
      out.write("\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("   ");

      
      // http://localhost:8080/web/day06/productDetail.jsp&pno=25
   
   
      // pno라는 파라미터 값 가져오기
      String p = request.getParameter("pno");
   
      // out.println("pno: " + p);
      // 파라미터 값이 null이 아니라면
      if (p != null) {
         // productDAO 객체 생성하기
         ProductDAO dao = new ProductDAO();
         // p라는 문자열 변수의 값을 숫자로 형변환
         int pno = Integer.parseInt(p);
         // db에서 해당 상품정보 가져오기
         ProductVO vo = dao.getOne(pno);
   
      out.write("\n");
      out.write("   \n");
      out.write("   <div class=\"container\">\n");
      out.write("   		<form action=\"\" name=\"frm\">\n");
      out.write("   			<input type=\"hidden\" name=\"pno\"  id=\"pno\" value=\"");
      out.print( vo.getPno() );
      out.write("\"/>\n");
      out.write("   		</form>\n");
      out.write("      <div id=\"pic\">\n");
      out.write("         <img src=\"");
      out.print(vo.getBigfile() );
      out.write("\" alt=\"");
      out.print(vo.getPname() );
      out.write("\" />\n");
      out.write("      </div>\n");
      out.write("      \n");
      out.write("      <div class=\"info\">\n");
      out.write("         <table>\n");
      out.write("            <tr>\n");
      out.write("               <td colspan=\"2\">\n");
      out.write("                  ");
      out.print(vo.getPname() );
      out.write("\n");
      out.write("               </td>\n");
      out.write("            </tr>\n");
      out.write("            \n");
      out.write("            <tr>\n");
      out.write("               <td>판매가격</td>\n");
      out.write("               <td>");
      out.print(vo.getPrice() );
      out.write("</td>\n");
      out.write("            </tr>\n");
      out.write("            \n");
      out.write("            <tr>\n");
      out.write("               <td>할인가격</td>\n");
      out.write("               <td>");
      out.print(Math.round(vo.getPrice() * (1-vo.getDcratio() * 0.01)) );
      out.write("</td>\n");
      out.write("            </tr>\n");
      out.write("            \n");
      out.write("            <tr>\n");
      out.write("               <td colspan=\"2\">\n");
      out.write("                  <img class=\"icon\" src=\"../images/buy.png\" alt=\"\" />\n");
      out.write("                  <img class=\"icon\" src=\"../images/cart.png\" alt=\"\" />\n");
      out.write("                  <a href=\"viewCart.jsp\">장바구니 보러가기</a>\n");
      out.write("                  <a href=\"productList.jsp\">상품목록</a>\n");
      out.write("               </td>\n");
      out.write("            </tr>\n");
      out.write("         </table>\n");
      out.write("         \n");
      out.write("         <div class=\"desc\">\n");
      out.write("            <!-- 제품 상세 설명 -->\n");
      out.write("            <p>");
      out.print(vo.getProdesc() );
      out.write("</p>\n");
      out.write("         </div>\n");
      out.write("         \n");
      out.write("         <div id=\"showImg\" style=\"display: none;\">\n");
      out.write("            <h1>장바구니에 넣었습니다.</h1>\n");
      out.write("            <a href=\"javascript:closeDiv()\">닫기</a>\n");
      out.write("         </div>\n");
      out.write("      \n");
      out.write("      </div>\n");
      out.write("      \n");
      out.write("   </div>\n");
      out.write("   \n");
      out.write("   \n");
      out.write("   ");

      }
   
      out.write("\n");
      out.write("   \n");
      out.write("   \n");
      out.write("   \n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
