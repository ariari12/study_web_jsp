/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.20
 * Generated at: 2024-04-26 01:44:46 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.day08;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;

public final class ajax01_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(3);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<script>\r\n");
      out.write("	//AJAX(Asynchronous JavaScript and XML)\r\n");
      out.write("	//비동기화 방식으로 통신\r\n");
      out.write("	// 통신을 담당하는 객체 : XMLHttpRequest 객체\r\n");
      out.write("	\r\n");
      out.write("	let xhr = null;\r\n");
      out.write("	//XMLHttpRequest 객체얻어오는 함수\r\n");
      out.write("	function getXMLHttpRequest(){\r\n");
      out.write("		//MS 브라우저의 경우\r\n");
      out.write("		if(window.ActiveObject){\r\n");
      out.write("			try{\r\n");
      out.write("				return new ActiveObject(\"MsXML2.XMLHttp\")	;\r\n");
      out.write("			}catch(e){\r\n");
      out.write("				try{\r\n");
      out.write("					return new ActiveObject(\"Microsoft.XMLHttp\");	\r\n");
      out.write("				}catch(e){\r\n");
      out.write("					null;\r\n");
      out.write("				}\r\n");
      out.write("				\r\n");
      out.write("			}\r\n");
      out.write("			\r\n");
      out.write("		}else if(window.XMLHttpRequest){\r\n");
      out.write("			//그 외 브라우저라면\r\n");
      out.write("			return new XMLHttpRequest();\r\n");
      out.write("		}else{\r\n");
      out.write("			//어떤 브라우저인지 모르겠음\r\n");
      out.write("			return null;\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	function load(url){\r\n");
      out.write("		/* console.log(url); */\r\n");
      out.write("		// 1. 통신객체(XMLHttpRequest) 객체 얻어오기\r\n");
      out.write("		xhr = getXMLHttpRequest();\r\n");
      out.write("		console.log(xhr);\r\n");
      out.write("		\r\n");
      out.write("		// 2. callback 함수\r\n");
      out.write("		// 대기하고 있다가 응답이 오면 이 함수를 실행\r\n");
      out.write("		xhr.onreadystatechange=viewMessage;\r\n");
      out.write("		\r\n");
      out.write("		// 3. open(통신방식 , 주소, 비동기 통신여부)\r\n");
      out.write("		xhr.open(\"GET\",url,true);\r\n");
      out.write("		// GET 방식으로 url에 접근하는 비동기 방식으로 통신해\r\n");
      out.write("		\r\n");
      out.write("		xhr.send(null);\r\n");
      out.write("		// POST 방식일때 value값을 준다.\r\n");
      out.write("		console.log(xhr);\r\n");
      out.write("	}\r\n");
      out.write("	//4 callback 함수 정의\r\n");
      out.write("	function viewMessage(){\r\n");
      out.write("		//console.log(\"view Message() 호출중\");\r\n");
      out.write("		\r\n");
      out.write("		// 통신이 완료되었을 때 and 정상페이지일때\r\n");
      out.write("		if(xhr.readyState == 4){ //통신이 완료\r\n");
      out.write("			if(xhr.status == 200){ //통신이 완료\r\n");
      out.write("				/* alert(xhr.responseText); */\r\n");
      out.write("				let div1 = document.querySelector(\"#div1\");\r\n");
      out.write("				\r\n");
      out.write("				//서버로 부터 수신한 내용을 출력\r\n");
      out.write("				div1.innerText=xhr.responseText;\r\n");
      out.write("			}\r\n");
      out.write("		}\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<!--\r\n");
      out.write("		AJAX(Asynchronous JavaScript and XML)\r\n");
      out.write("		: 자바스크립트를 통해서 서버에 데이터를 요청하는것\r\n");
      out.write("		: 리로드를 하지 않고 데이터를 불러오는 방식 \r\n");
      out.write("	 -->\r\n");
      out.write("	 <input type=\"button\" value=\"simple1.txt\" onclick=\"load('simple1.txt')\" />\r\n");
      out.write("	 <input type=\"button\" value=\"simple2.jsp\" onclick=\"load('simple1.jsp')\" />\r\n");
      out.write("	 <input type=\"button\" value=\"simple1.txt\" onclick=\"load('simple2.txt')\" />\r\n");
      out.write("	 <input type=\"button\" value=\"simple2.jsp\" onclick=\"load('simple2.jsp')\" />\r\n");
      out.write("	 \r\n");
      out.write("	 <div id=\"div1\">\r\n");
      out.write("	 	<!-- 서버에 가져온 글자를 출력 -->\r\n");
      out.write("	 </div>	\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
