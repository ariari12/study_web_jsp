/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.20
 * Generated at: 2024-04-24 08:49:36 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.day07;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;

public final class register_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(3);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<script src=\"//t1.daumcdn.net/mapjsapi/bundle/postcode/prod/postcode.v2.js\"></script>\r\n");
      out.write("<script>\r\n");
      out.write("	window.onload=function(){\r\n");
      out.write("		let btn = document.getElementById(\"btn\");\r\n");
      out.write("		btn.onclick=openKakaoPostCode; // openKakaoPostCode 함수를 실행해\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	function openKakaoPostCode(){\r\n");
      out.write("		/* console.log(\"버튼 눌림\"); */\r\n");
      out.write("		\r\n");
      out.write("	    new daum.Postcode({\r\n");
      out.write("	        oncomplete: function(data) {\r\n");
      out.write("				// 팝업에서 검색 결과 항목을 클릭했을때\r\n");
      out.write("				// 실행할 코드를 작성하는 부분\r\n");
      out.write("				console.log(\"팝업에서 검색 버튼 눌림\");\r\n");
      out.write("				console.dir(data);\r\n");
      out.write("				\r\n");
      out.write("				let zipcode=document.getElementById(\"zipcode\");				\r\n");
      out.write("				zipcode.value=data.zonecode;				\r\n");
      out.write("	        }\r\n");
      out.write("	    }).open();\r\n");
      out.write("	}\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<form action=\"registerOk.jsp\">\r\n");
      out.write("	<label for=\"id\">ID :</label>\r\n");
      out.write("	<input type=\"text\" name=\"id\" id=\"id\">\r\n");
      out.write("	<br />\r\n");
      out.write("	<label for=\"name\">NAME :</label>\r\n");
      out.write("	<input type=\"text\" name=\"name\" id=\"name\">\r\n");
      out.write("	<br />\r\n");
      out.write("	<label for=\"birthNum\">주민등록번호 :</label>\r\n");
      out.write("	<input type=\"text\" name=\"birthNum1\" id=\"birthNum\">\r\n");
      out.write("	-\r\n");
      out.write("	<input type=\"text\" name=\"birthNum2\">\r\n");
      out.write("	<br />\r\n");
      out.write("	<label for=\"pw\">비밀번호 :</label>\r\n");
      out.write("	<input type=\"password\" name=\"pw\" id=\"pw\">	\r\n");
      out.write("	<br />\r\n");
      out.write("	<label for=\"tel\">전화번호 :</label>\r\n");
      out.write("	<input type=\"text\" name=\"tel1\" id=\"tel\">\r\n");
      out.write("	- \r\n");
      out.write("	<input type=\"text\" name=\"tel2\">\r\n");
      out.write("	- \r\n");
      out.write("	<input type=\"text\" name=\"tel3\">\r\n");
      out.write("	<br />\r\n");
      out.write("	<label for=\"addr\">주소 :</label>\r\n");
      out.write("	<input type=\"text\" name=\"addr\" id=\"addr\">\r\n");
      out.write("	<br />\r\n");
      out.write("	<label for=\"email\">EMAIL :</label>\r\n");
      out.write("	<input type=\"text\" name=\"email1\" id=\"email\">\r\n");
      out.write("	@\r\n");
      out.write("	<input type=\"text\" name=\"email2\">\r\n");
      out.write("	<select name=\"email3\" id=\"\">\r\n");
      out.write("		<option value=\"\">직접입력</option>\r\n");
      out.write("		<option value=\"naver.com\">naver.com</option>\r\n");
      out.write("		<option value=\"gmail.com\">gmail.com</option>\r\n");
      out.write("	</select>\r\n");
      out.write("	<br />\r\n");
      out.write("	<label for=\"gender\">성별 :</label>\r\n");
      out.write("	<div id=\"gender\">\r\n");
      out.write("		<input type=\"radio\" name=\"sex\" value=\"남\"  >남\r\n");
      out.write("		<input type=\"radio\" name=\"sex\" value=\"여\" >여\r\n");
      out.write("	</div>\r\n");
      out.write("	<label for=\"hobby\">취미 :</label>\r\n");
      out.write("	<div id=\"hobby\">\r\n");
      out.write("		<input type=\"checkbox\" name=\"hob\" value=\"음악감상\" >음악감상\r\n");
      out.write("		<input type=\"checkbox\" name=\"hob\" value=\"독서\" >독서\r\n");
      out.write("		<input type=\"checkbox\" name=\"hob\" value=\"운동\" >운동\r\n");
      out.write("	</div>\r\n");
      out.write("	\r\n");
      out.write("	<label for=\"zipcode\">우편번호 :</label>\r\n");
      out.write("	<div id=\"zipcode\">\r\n");
      out.write("		<input type=\"text\" name=\"zipcode\" id=\"zipcode\" />\r\n");
      out.write("		<input type=\"button\" value=\"우편번호찾기\" id=\"btn\" /><br />\r\n");
      out.write("	</div>\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	<input type=\"submit\" value=\"가입하기\" />\r\n");
      out.write("	<input type=\"reset\" value=\"취소하기\" />\r\n");
      out.write("</form>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
